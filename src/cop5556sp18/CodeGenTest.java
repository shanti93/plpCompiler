/**
 * Starter code with JUnit tests for code generation used in the class project in COP5556 Programming Language Principles 
 * at the University of Florida, Spring 2018.
 * 
 * This software is solely for the educational benefit of students 
 * enrolled in the course during the Spring 2018 semester.  
 * 
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 * 
 *  @Beverly A. Sanders, 2018
 */


package cop5556sp18;



import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.swing.JFrame;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp18.CodeGenUtils.DynamicClassLoader;
import cop5556sp18.AST.Program;

public class CodeGenTest {
	
	//determines whether show prints anything
	static boolean doPrint = true;
	
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	//determines whether a classfile is created
	static boolean doCreateFile = false;

	@Rule
	public ExpectedException thrown = ExpectedException.none();
	

	//values passed to CodeGenerator constructor to control grading and debugging output
	private boolean devel = true; //if true, print devel output
	private boolean grade = true; //if true, print grade output
	
//	private boolean devel = false; 
//	private boolean grade = false; 
	
	//sets the default width and height of newly created images.  Should be small enough to fit on screen.
	public static final int defaultWidth = 1024;
	public static final int defaultHeight = 1024;

	
	/**
	 * Generates bytecode for given input.
	 * Throws exceptions for Lexical, Syntax, and Type checking errors
	 * 
	 * @param input   String containing source code
	 * @return        Generated bytecode
	 * @throws Exception
	 */
	byte[] genCode(String input) throws Exception {
		
		//scan, parse, and type check
		Scanner scanner = new Scanner(input);
		show(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		Program program = parser.parse();
		TypeChecker v = new TypeChecker();
		program.visit(v, null);
//		show(program);  //It may be useful useful to show this here if code generation fails

		//generate code
		CodeGenerator cv = new CodeGenerator(devel, grade, null, defaultWidth, defaultHeight);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		show(program); //doing it here shows the values filled in during code gen
		//display the generated bytecode
		show(CodeGenUtils.bytecodeToString(bytecode));
		
		//write byte code to file 
		if (doCreateFile) {
			String name = ((Program) program).progName;
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
		}
		
		//return generated classfile as byte array
		return bytecode;
	}
	
	/**
	 * Run main method in given class
	 * 
	 * @param className    
	 * @param bytecode    
	 * @param commandLineArgs  String array containing command line arguments, empty array if none
	 * @throws + 
	 * @throws Throwable 
	 */
	void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception  {
		RuntimeLog.initLog(); //initialize log used for grading.
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		@SuppressWarnings("rawtypes")
		Class[] argTypes = {commandLineArgs.getClass()};
		Method m = testClass.getMethod("main", argTypes );
		show("Output from " + m + ":");  //print name of method to be executed
		Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
		
		try {
		m.invoke(null, passedArgs);	
		}
		catch (Exception e) {
			Throwable cause = e.getCause();
			if (cause instanceof Exception) {
				Exception ec = (Exception) e.getCause();
				throw ec;
			}
			throw  e;
		}
	}
	

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, waitForKey will pause until a key is pressed.
	 * 
	 * @throws IOException
	 */
	void waitForKey() throws IOException {
		System.out.println("enter any char to exit");
		System.in.read();
	}

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, keepFrame will keep the frame visible for 5000 milliseconds.
	 * 
	 * @throws Exception
	 */
	void keepFrame() throws Exception {
		Thread.sleep(5000);
	}
	
	
	
	


	/**
	 * Since we are not doing any optimization, the compiler will 
	 * still create a class with a main method and the JUnit test will
	 * execute it.  
	 * 
	 * The only thing it will do is append the "entering main" and "leaving main" messages to the log.
	 * 
	 * @throws Exception
	 */
	@Test
	public void emptyProg() throws Exception {
		String prog = "emptyProg";	
		String input = prog + "{}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n "+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	

	
	@Test
	public void integerLit() throws Exception {
		String prog = "integerLit";
		String input = prog + "{image p[1000,1000];int x; input x from @ 0; boolean z;input z from @ 1;float a; input a from @ 2; input p from @ 3; } ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"1", "true","1.1","https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void test4() throws Exception {
		String prog = "test4";
		String input = prog + "{int x; input x from @ 1;show x; float y; input y from @ 0;show y; boolean z; input z from @ 2;show z;input z from @ 3; show z; }";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"1.3","2","true","false"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testImage() throws Exception {
		String prog = "testImage";
		String input = prog + "{image y; input y from @ 0; show y;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	} 
	@Test
	public void testFilename() throws Exception {
		String prog = "testFilename";
		String input = prog + "{filename f1; filename f2;  input f1 from @ 0 ;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testUnary() throws Exception {
		String prog = "testUnary";
		String input = prog + "{show 3% 2;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void test5() throws Exception {
		String prog = "test5";
		String input = prog + "{image y; image copy[128,256]; input y from @ 0 ; show y; copy := y; show copy;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testSleep() throws Exception {
		String prog = "testSleep";
		String input = prog + "{}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testpredefined() throws Exception {
		String prog = "testpredefined";
		String input = prog + "{show Z; show default_width; show default_height;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testbooleanassign() throws Exception {
		String prog = "testbooleanassign";
		String input = prog + "{boolean y; y := true; show y; y := false; show y;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testimageAssign() throws Exception {
		String prog = "testimageAssign";
		String input = prog + "{image y[1000,1000]; image copy[1000,1000]; input y from @ 0;  }";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void test6() throws Exception {
		String prog = "test6";
		String input = prog + "{image x; input x from @ 0 ; show x; image y; y := x; show y;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void test7() throws Exception {
		String prog = "test7";
		String input = prog + "{image y[1000,1000]; image copy[1000,1000]; input y from @ 0 ; show y; copy := y; show copy;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void test8() throws Exception {
		String prog = "test8";
		String input = prog + "{image b[512,256]; input b from @ 0;show width(b);show height(b);image c; c:= b; show width(c); show height(c); }";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testlast() throws Exception {
		String prog = "testlast";
		String input = prog + "{image b[512,256]; show width(b); show height(b);image c; show width(c); show height(c);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void test9() throws Exception {
		String prog = "test9";
		String input = prog + "{int a; a := 123456789;\n show red(a); show green(a); show blue(a);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void test10() throws Exception {
		String prog = "test10";
		String input = prog + "{show true ? -+5 : 9;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void test11() throws Exception {
		String prog = "test3";
		String input = prog + "{float a; a := float(-3.7); show a; a := float(4); show a;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void test12() throws Exception {
		String prog = "test3";
		String input = prog + "{int a; a := int(-3.7); show a; a := int(4); show a;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testImage2() throws Exception {
		String prog = "testImage2";
		String input = prog + "{image y[300,400]; input y from @ 0 ; show width(y); show height(y);show y;  }";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testEverything() throws Exception {
		String prog = "testEverything";
		String input = prog + "{show 9 |4;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testEverything2() throws Exception {
		String prog = "testEverything2";
		String input = prog + "{image y[512,256]; show y;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testEverything3() throws Exception {
		String prog = "testEverything3";
		String input = prog + "{int a; a := 123456789; show alpha(a); a := -1; show alpha(a);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void failedTest1() throws Exception {
		String prog = "failedTest1";
		String input = prog + "{show 9 + 4;show 9 - 4;show 9 * 4;show 9 / 4;show 9 ** 4;show 9 % 4;show 9 & 4;show 9 | 4;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void failedTest2() throws Exception {
		String prog = "failedTest2";
		String input = prog + "{image y;filename f; input y from @ 0 ; input f from @1;  show y; write y to f;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365", "test"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void failedTest3() throws Exception {
		String prog = "failedTest3";
		String input = prog + "{show 9.1 - 4.1;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void failedTest4() throws Exception {
		String prog = "failedTest4";
		String input = prog + "{show !false; show !true; show !(true | false); show !(true & false);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void failedTest5() throws Exception {
		String prog = "failedTest5";
		String input = prog + "{show 1 --2 * 3 & 14;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void failedTest6() throws Exception {
		String prog = "failedTest6";
		String input = prog + "{image y[512,256];  show y;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"Test"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void failedTest7() throws Exception {
		String prog = "failedTest7";
		String input = prog + "{image b[512,256]; show width(b); show height(b);image c; show width(c); show height(c);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void failedTest8() throws Exception {
		String prog = "failedTest8";
		String input = prog + "{filename f1;filename f2;input f1 from @ 0; f2:=f1;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"_R3A8640.JPG"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
@Test
	public void failedTest9() throws Exception {
		String prog = "failedTest9";
		String input = prog + "{int x; x:= 2;while( x<=5){show x; x:=x+1; show x;}; }";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void teststatementWrite1() throws Exception {
		String prog = "teststatementWrite1";
		String input = prog + "{image y; input y from @ 0; filename x; input x from @ 1; write y to x;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365", "Shanti"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void teststatementWhile1() throws Exception {
		String prog = "teststatementWhile1";
		String input = prog + "{int x; x:= 2;while(x<=10){show x; x:=x+1;}; boolean z;z:=true;while(z!=false){show z;z:=false;};}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testRealtionalOperators1() throws Exception {
		String prog = "testRealtionalOperators1";
		String input = prog + "{int y; y:=5; show y<=9;show y >6;float x; x:=1.02; show x > 0.5; show x>=1.02;show x<=1.02; show x<=2.3;show x<1.1; show x<0.5; show x!=1.01; show x!=1.02; show true != false; show true!=true;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testStatementIf() throws Exception {
		String prog = "testStatementIf";
		String input = prog + "{int x; x:=3;if(x>=1){show x;int y; y:=0;if(y<=2){show y;};while(y>=-5){show y; y:=y-2;};};}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testpixelfunctionApp() throws Exception {
		String prog = "testpixelfunctionApp";
		String input = prog + "{show cart_x[5.0,0.0]; show polar_a[1,2]; show polar_r[1,2]; show cart_y[5.1,90.0];}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testpixelSelector() throws Exception {
		String prog = "testpixelSelector";
		String input = prog + "{image x;input x from @ 0;show x[10,10];x[10,10] :=3; show x;show x[10,10];alpha(x[10,10]) := 4;show alpha(x[10,10]);}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testExpressionConditional() throws Exception {
		String prog = "testExpressionConditional";
		String input = prog + "{int x;int y;input x from @ 0; show x>3 ? true: false; show 3;}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"1"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testAdditional() throws Exception {
		String prog = "testAdditional";
		String input = prog + "{int x;x:=4; image c;input c from @ 0;show c;if(x!=0){ x:=x-4;};}";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/Zl7XwhbI_UOgTd92AEBiWFZLBd-LjIe3lSuIh2hhcRXo2c7yInDiqjioRhNbvxpRdTiU9cAdhw=w640-h400-e365"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	

}